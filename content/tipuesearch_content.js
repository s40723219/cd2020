var tipuesearch = {"pages": [{'title': 'weeks', 'text': 'weel1~5 \n', 'tags': '', 'url': 'weeks.html'}, {'title': 'week1~5', 'text': 'week1 \n \n 建立自己的倉儲並管理網頁 \n git clone新建倉儲網址 \n git submodule add老師cmsimde的網址 \n 到cmsimde裡面的up_dir，並將所有項目複製到cd2020 \n 完成後用python wsgi.py 開始編輯網頁 \n week2 \n \n 組長進行直播，並分配工作 組長講的重點 1.作業一必須在3/26前完成，並上傳pdf檔到個人倉儲的download上。 \n 2.每周務必上傳進度。 \n 3.不會做的可以問會的同學或在gitter上發問。 \n 4.請依每個人的作業一pdf檔、網站內容，進行互評。 \n 我被分配到的工作是讓 系統可以使用最新的Python 3.8.2 \n 讓系統可以使用最新的Python 3.8.2 \n \n 首先建立一資料夾cd2020，進去裡面建立data，並在data裡建立py382及wscite432、portablegit \n 去python的官網 \n https://www.python.org/ \n 並在下載區找到windows並選取Latest Python 3 Release - Python 3.8.2 \n 找到Windows x86-64 executable installer並下載到py382裡 \n 下載時將pip的選項取消 \n 再去下載SciTE系統 full 64-bit download，並放到data裡的wscite432 \n 建立start.bat \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\n%Disk%:\n\nset HomePath=%Disk%:\\home\nset HomeDrive=%Disk%:\\home\nset Home=%Disk%:\\home\nset USERPROFILE=%Disk%:\\home\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\n#REM for putty\n#Set GIT_HOME=%CDisk%:\\portablegit\\bin\\\n#Set GIT_SSH=%Disk%:\\putty\\plink.exe\n\nset PYTHONPATH=%Disk%:\\py382\\DLLs;%Disk%:\\py382\\Lib;%Disk%:\\py382\\Lib\\site-packages;\nset PYTHONHOME=%Disk%:\\py382\n\nset path_python=%Disk%:\\py382;%Disk%:\\py382\\Scripts;\nset path_msys2=%Disk%:\\msys64\\mingw64\\bin;\nset path_git=%Disk%:\\portablegit\\bin;\nset path_tcc=%Disk%:\\tcc;\n\npath=%Disk%:;%path_python%;%path_msys2%;%path_git%;%path_tcc%;\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wscite432\\wscite\\SciTE.exe\nstart /MIN %Disk%:\\wscite432\\wscite\\SciTE.exe\n\nExit\n\n \n 建立stop.bat \n \n @echo off\nset Disk=y\npath=%PATH%;\n\ntaskkill /IM python.exe /F\ntaskkill /IM pythonw.exe /F\ntaskkill /IM scite.exe /F\n\nREM 終止虛擬硬碟與目錄的對應\nsubst %Disk%: /D\nREM 關閉 cmd 指令視窗\ntaskkill /IM cmd.exe /F\n\nEXIT \n 下載msys2-x86_64-20190524.exe 到data裡 \n 下載64-bit Git for Windows Portable 至 portablegit裡 \n 到https://bootstrap.pypa.io/get-pip.py頁面，安裝pip並另存新檔到data下 \n 執行python get-pip.py和pip install flask bs4 lmxl pelican markdown flask_cors leo指令，將python3.8.2版本缺少的模組補齊 \n week3 \n \n 目前進度 \n', 'tags': '', 'url': 'week1~5.html'}, {'title': 'Assignment', 'text': '', 'tags': '', 'url': 'Assignment.html'}, {'title': 'Assignment1', 'text': 'Random grouping \n Portable system \n Four wheel car \n \n', 'tags': '', 'url': 'Assignment1.html'}, {'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.', 'tags': '', 'url': 'Develop.html'}]};